Difference Between Static Class, Sealed Class, and Abstract Class in C#
We come across this question very often that what is the difference between Static, Sealed and Abstract class in C#.


Static Class: Declared with Static keyword, methods in Static Class are also static along with variables of the class.

This class cannot be instantiated, i.e we cannot have objects of this class. To access methods of this class, you can directly use classname.method. Also this class cannot be inherited.



Sealed Class: Declared with Sealed keyword, which enables this class to seal all its variables, methods and properties. No other class can inherit anything from this class or in other words, this class cannot be inherited. But we can instantiate this class, i.e we can have any number of objects of a sealed class.



Abstract Class: Declared with abstract keyword, this class is primarily created as a Inheritable class. An abstract class enables other classes to inherit from this class, but forbids to instantiate. One can inherit from an abstract class but we cannot create objects of an abstract class. Abstract class can have abstract as well as non abstract methods. Abstract methods are those which are not having method definition.



One important point to remember is a non-static class can have static methods. But Static classes must have all members as Static.
